import numpy as np
import matplotlib.pyplot as plt
import collections

# Par√¢metros
n_estados = 4
n_passos = 50  # cada passo gera 1 estado + 1 sil√™ncio

# In√≠cio com dois estados aleat√≥rios
ativos = [np.random.randint(n_estados), np.random.randint(n_estados)]

# Fun√ß√£o de transi√ß√£o vetorial com muta√ß√£o
def transicao(a, b):
    base = (2 * a + b) % n_estados
    mutacao = np.random.choice([0, 1], p=[0.9, 0.1])
    return (base + mutacao) % n_estados

# Gera√ß√£o da mem√≥ria intercalada com sil√™ncios (None = ‚åÄ)
memoria = []
for i in range(n_passos):
    if i < 2:
        estado = ativos[i]
    else:
        estado = transicao(ativos[-1], ativos[-2])
        ativos.append(estado)
    memoria.append(estado)
    memoria.append(None)  # ‚åÄ: pausa vetorial

# üßÆ Contagem e entropia (somente para estados ativos)
estados_ativos = [x for x in memoria if x is not None]
contagem = collections.Counter(estados_ativos)
print("Distribui√ß√£o de estados ativos:")
for k in range(n_estados):
    print(f"Estado {k}: {contagem[k]} vezes")

freq = np.array([contagem[k] for k in range(n_estados)]) / len(estados_ativos)
entropia = -np.sum(freq * np.log2(freq + 1e-12))
print(f"\nEntropia de Shannon: {entropia:.3f} bits")

# üé® Visualiza√ß√£o (sil√™ncio = cinza)
colors = ["black", "crimson", "gold", "royalblue", "lightgray"]
color_map = [colors[val] if val is not None else colors[-1] for val in memoria]

plt.figure(figsize=(12, 1.5))
plt.bar(range(len(memoria)), [1]*len(memoria), color=color_map, edgecolor='white')
plt.title("üß† Ciclo de Mem√≥ria Vetorial com Sil√™ncios (‚åÄ)")
plt.xticks([])
plt.yticks([])
plt.tight_layout()
plt.show()
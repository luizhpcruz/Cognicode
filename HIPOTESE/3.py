import numpy as np
import matplotlib.pyplot as plt
import collections

# Par칙metros
n_estados = 4      # N칰mero de estados poss칤veis (valores simb칩licos)
n_passos = 100     # Quantidade de ciclos de mem칩ria

# Inicializa칞칚o com dois estados iniciais aleat칩rios
memoria = [np.random.randint(n_estados), np.random.randint(n_estados)]

# 游대 Fun칞칚o de transi칞칚o vetorial com muta칞칚o probabil칤stica
def transicao(a, b):
    base = (2 * a + b) % n_estados
    mutacao = np.random.choice([0, 1], p=[0.9, 0.1])  # 10% chance de perturba칞칚o
    return (base + mutacao) % n_estados

# Gerar a sequ칡ncia completa
for _ in range(n_passos - 2):
    novo_estado = transicao(memoria[-1], memoria[-2])
    memoria.append(novo_estado)

# 游늵 An치lise de distribui칞칚o
contagem = collections.Counter(memoria)
print("Distribui칞칚o de estados:")
for k in range(n_estados):
    print(f"Estado {k}: {contagem[k]} vezes")

# Entropia de Shannon
freq = np.array([contagem[k] for k in range(n_estados)]) / len(memoria)
entropia = -np.sum(freq * np.log2(freq + 1e-12))  # Evita log(0) com epsilon
print(f"\nEntropia de Shannon: {entropia:.3f} bits")

# 游꿛 Visualiza칞칚o como imagem vetorial 1D
plt.figure(figsize=(10, 1.5))
plt.imshow([memoria], cmap=plt.cm.get_cmap("Set1", n_estados), aspect='auto')
plt.title("Mem칩ria Vetorial como Imagem Discreta")
plt.axis('off')
plt.tight_layout()
plt.show()
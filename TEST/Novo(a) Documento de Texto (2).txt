Resolving FileNotFoundError in Cosmological Data Analysis: A Comprehensive Report on the Cosmic Unified Model and Observational AnalyzerExecutive SummaryThis report addresses a FileNotFoundError encountered in a Python "Cosmic Unified Model" and "Observational Analyzer" code snippet, specifically related to a Matplotlib style. It provides a comprehensive explanation of the underlying scientific concepts, including the standard Lambda-CDM (ΛCDM) cosmological model and the observational data used to constrain it. The report then diagnoses the FileNotFoundError as a common issue arising from deprecated Matplotlib/Seaborn style names due to library version updates. Finally, it offers practical, step-by-step solutions for resolving the error and best practices for robust scientific code development.1. Introduction: The Cosmic Unified Model and Observational Analyzer in ContextModern astrophysics relies heavily on computational tools to advance understanding of the universe. Programs referred to as "Cosmic Unified Models" and "Observational Analyzers" serve as indispensable instruments for researchers. These tools enable the simulation of the universe's evolution based on fundamental physical principles, allowing for the comparison of theoretical predictions with empirical astronomical observations. Such computational frameworks are at the forefront of cosmological research, providing a means to explore complex scenarios that would be intractable through analytical methods alone.The progression of cosmological understanding is characterized by a continuous feedback loop between theoretical models and empirical data. Theoretical "Cosmic Unified Models" propose frameworks describing the universe's constituents, its fundamental laws, and its dynamic evolution from the Big Bang to the present day. These models are then rigorously tested and refined against empirical data, which is processed and interpreted by "Observational Analyzers." This iterative process of prediction, observation, and refinement is fundamental to the scientific method in cosmology. The user's Python code snippet, by its very description, appears to embody this critical workflow: defining a theoretical cosmological framework and subsequently validating or constraining it against real-world observational measurements. This approach is central to how cosmologists build and test their understanding of the cosmos.2. Scientific Foundations: Key Cosmological Parameters and Models2.1 The Standard Model of Cosmology: Lambda-CDM (ΛCDM)The ΛCDM model stands as the current standard "Cosmic Unified Model" that most accurately describes the universe's evolution and its large-scale structure. This model posits a spatially flat universe, meaning its geometry is Euclidean on cosmic scales, and is primarily composed of cold dark matter (CDM) and a cosmological constant (Λ), which represents dark energy.1The cosmological constant, Λ, was initially introduced by Albert Einstein into his field equations of general relativity. Although he later removed it, it was revived to express the energy density of space, often referred to as vacuum energy, which arises from quantum mechanics.1 This dark energy is the driving force behind the universe's observed accelerated expansion. Cold dark matter, on the other hand, is a hypothetical form of matter that interacts solely through gravity, without engaging in electromagnetic or strong nuclear interactions. Its presence is inferred from its gravitational effects on visible matter and the large-scale structure of the universe.The Planck mission, a European Space Agency endeavor, provided the most precise full-sky measurements of the Cosmic Microwave Background (CMB) anisotropies. The final full-mission Planck measurements, particularly those from 2018, have yielded highly consistent results with the standard spatially-flat 6-parameter ΛCDM cosmology.3 These measurements, combining information from temperature and polarization maps, along with lensing reconstruction, have significantly refined the values of key cosmological parameters.The parameters derived from Planck 2018 data are crucial for understanding the universe's composition and evolution:Hubble Constant (H0): The current rate at which the universe is expanding, measured by Planck 2018 as (67.4 ± 0.5) km s⁻¹ Mpc⁻¹.3Matter Density Parameter (Ωm): The fraction of the universe's total energy density contributed by all forms of matter (baryonic and dark matter). Planck 2018 reports Ωm = 0.315 ± 0.007.3Dark Energy Density Parameter (ΩΛ): The fraction of the universe's total energy density attributed to dark energy. For a spatially flat universe, the sum of Ωm and ΩΛ is approximately 1.1 Combined data, including Pantheon+ supernovae, indicate approximately 66.2% dark energy.10Baryon Density (Ωbh²): The physical density of ordinary, or baryonic, matter, measured as 0.0224 ± 0.0001.3Dark Matter Density (Ωch²): The physical density of cold dark matter, determined to be 0.120 ± 0.001.3Scalar Spectral Index (ns): A parameter describing the power-law spectrum of primordial density perturbations, with a value of 0.965 ± 0.004.3Optical Depth (τ): Related to the reionization of the universe, measured as 0.054 ± 0.007.3Matter Fluctuation Amplitude (σ8): Quantifies the amplitude of matter density fluctuations on a specific scale, found to be 0.811 ± 0.006.3Spatial Curvature (ΩK): Consistent with a flat universe, with ΩK = 0.001 ± 0.002.3Dark Energy Equation of State Parameter (w0): Measured to be -1.03 ± 0.03, consistent with a cosmological constant.3Effective Extra Relativistic Degrees of Freedom (Neff): Constrained to be 2.99 ± 0.17, in agreement with the Standard Model prediction of 3.046.6These precise measurements underscore the remarkable success of the ΛCDM model in describing the universe. However, it is important to note that while the Planck results show good consistency with this model, there are slight tensions with other observational datasets, such as the Dark Energy Survey's combined-probe results, which prefer lower fluctuation amplitudes or matter density parameters. A significant 3.6-sigma tension also exists with some other observations.3 Furthermore, the CMB spectra consistently indicate higher lensing amplitudes than predicted by the base ΛCDM model, exceeding a 2-sigma deviation.3 These discrepancies, particularly the well-known Hubble tension where H0 values from early-universe (CMB) and late-universe (supernovae) probes differ, suggest that while ΛCDM is a highly successful framework, it may not be the complete picture. The "Cosmic Unified Model," therefore, represents a working hypothesis that is continuously being tested and potentially extended, rather than a final, immutable theory. This dynamic interplay implies that an "Observational Analyzer" is not merely confirming the model but actively probing its boundaries and limitations.Table 1: Planck 2018 ΛCDM Cosmological ParametersParameterSymbolValue (68% Confidence)UnitReferenceHubble ConstantH067.4 ± 0.5km s⁻¹ Mpc⁻¹3Matter Density ParameterΩm0.315 ± 0.007-3Dark Energy Density ParameterΩΛ~0.685 (derived)-1Baryon DensityΩbh²0.0224 ± 0.0001-3Cold Dark Matter DensityΩch²0.120 ± 0.001-3Scalar Spectral Indexns0.965 ± 0.004-3Optical Depthτ0.054 ± 0.007-3Matter Fluctuation Amplitudeσ80.811 ± 0.006-3Spatial CurvatureΩK0.001 ± 0.002-3Dark Energy Equation of Statew0-1.03 ± 0.03-3Effective Relativistic Degrees of FreedomNeff2.99 ± 0.17-62.2 Beyond ΛCDM: Alternative and Extended ModelsWhile the ΛCDM model provides an excellent fit to a vast array of cosmological data, theoretical physicists continue to explore alternative and extended models that might resolve existing tensions or provide a more complete description of the universe. One such area of exploration involves Torsion Gravity. Some theories propose extending Einstein's General Relativity to include torsion, a geometric property of spacetime that could couple with spin. This could have significant implications for quantum mechanics, particle physics, and especially early cosmology.12 For instance, some models suggest that torsion could act as a candidate for dark energy or induce inflationary processes in the early universe.13 The inclusion of torsion offers a more complete and self-consistent setting for modern physics, although its presence in current literature is not as prominent as its potential might suggest.12Another significant alternative is the Big Bounce Hypothesis. This cosmological model offers an alternative to the Big Bang singularity, proposing that the universe undergoes cycles of expansion and contraction, or that it contracted from an infinite past before a single "bounce" initiated its current expansion phase.14 This hypothesis aims to address fundamental questions about what existed before the Big Bang and how the universe could have emerged from an infinitely dense point, a singularity where classical theories of gravity break down.14 Recent research in loop quantum cosmology, for example, suggests that a previous universe might collapse not into a singularity, but to a point where quantum gravitational effects become so strongly repulsive that the universe rebounds, forming a new expanding branch.15 This concept implies that time continues infinitely into both the past and future, offering a cyclic or pre-existing universe scenario as opposed to a singular beginning.14It is important to distinguish these scientific models from concepts that fall outside the realm of mainstream scientific cosmology. For instance, ideas such as "Cosmic Consciousness" or "Cosmic DNA" 16 explore philosophical or metaphysical interpretations of the universe and consciousness, often positing consciousness as a driving force of creation or a hyperdimensional collective intelligence. While thought-provoking, these concepts are not currently supported by empirical evidence or testable predictions within the established frameworks of physical cosmology and are therefore not considered in the context of physical "Cosmic Unified Models" or "Observational Analyzers" as understood in scientific research.The statement from Planck data that there is "no compelling evidence for extensions to the base-Lambda CDM model" 3 does not negate the value of exploring these alternative theories. Rather, it indicates that current high-precision observational data do not statistically necessitate a deviation from the simplest ΛCDM model. However, the very existence of tensions, such as the Hubble tension or the CMB lensing anomaly, provides a strong motivation for theorists to continue exploring such extensions. Even if current data do not yet definitively favor these extensions over ΛCDM, the scientific process thrives on pushing boundaries and investigating all plausible avenues, especially where small but persistent discrepancies exist. This dynamic illustrates that the "Cosmic Unified Model" is a living concept, continuously being refined and potentially expanded to incorporate new phenomena or resolve existing puzzles as observational precision improves and theoretical understanding deepens.3. Observational Pillars: Data Driving Cosmological AnalysisThe "Observational Analyzer" component of a cosmological study relies on a diverse array of observational data, each providing unique constraints on the universe's properties and evolution. Three primary pillars of observational cosmology are the Cosmic Microwave Background, Type Ia Supernovae, and Baryon Acoustic Oscillations.3.1 Cosmic Microwave Background (CMB) AnisotropiesThe Cosmic Microwave Background (CMB) is the faint afterglow of the Big Bang, representing the oldest light in the universe. It provides a snapshot of the cosmos when it was approximately 380,000 years old, a period known as recombination, when the universe cooled sufficiently for protons and electrons to combine into neutral atoms, allowing photons to travel freely.3 The tiny temperature and polarization anisotropies (slight variations) in the CMB contain crucial information about the early universe's composition, geometry, and the seeds of structure formation.The Planck mission has provided the most precise full-sky measurements of these CMB anisotropies to date. Its data significantly improved constraints on ΛCDM parameters, particularly through enhanced measurements of large-scale polarization and robust lensing reconstruction.3 CMB data primarily constrain early-universe parameters such as the physical baryon density (Ωbh²), cold dark matter density (Ωch²), the scalar spectral index (ns), and the optical depth to reionization (τ). These early-universe parameters then indirectly constrain late-universe parameters like the Hubble constant (H0) and the total matter density parameter (Ωm) within the ΛCDM framework.3 The term trec in cosmological contexts often refers to the time of recombination, a fundamental epoch and timescale for calculations based on CMB data.193.2 Type Ia Supernovae (SNe Ia)Type Ia Supernovae (SNe Ia) are powerful stellar explosions that serve as "standard candles" in cosmology. Their intrinsic luminosity is remarkably consistent, allowing astronomers to determine their distance by measuring their observed brightness (flux).10 This property makes them invaluable tools for measuring cosmic distances and the expansion history of the universe.The groundbreaking observations of distant SNe Ia in 1998 famously revealed that the universe's expansion is not decelerating due to gravity, as previously expected, but is instead accelerating.1 This unexpected discovery led to the concept of dark energy, a mysterious component driving this acceleration.The Pantheon+ dataset represents the most comprehensive collection of Type Ia supernovae, encompassing 1550 distinct SNe Ia observed across approximately 10 billion years of cosmic time.10 This extensive dataset is used to precisely probe the universe's expansion history and its composition. Joint constraints derived from the Pantheon+ analysis, combined with data from Baryon Acoustic Oscillation (BAO) measurements and the Cosmic Microwave Background (Planck), indicate that the universe is composed of approximately 66.2% dark energy and 33.8% matter (including both normal and dark matter), with a total uncertainty of ±1.8% for each component.10In the context of SNe Ia and other distant objects, two important distance measures are used:Luminosity Distance (dL): This is the distance derived by comparing the observed flux (f) from an object with its known intrinsic luminosity (L), using the inverse-square law: f=L/(4πdL2).20Angular Diameter Distance (dA): This distance is obtained by comparing the physical linear size (D) of an object to its observed angular size (θ) on the sky: θ=D/dA.20These two distances are related in an expanding universe. For an object at redshift z, the luminosity distance and angular diameter distance are connected by the relationship dL=dA(1+z)2.20 The (1+z)2 factor accounts for two effects in an expanding universe: each photon received has its energy reduced by a factor of (1+z) due to redshift, and the rate of photon reception per unit time is also reduced by another factor of (1+z).20Table 2: Cosmic Composition from Pantheon+ and Combined DataComponentPercentage of Total Energy DensityUncertaintyReferenceDark Energy66.2%±1.8%10Matter (Normal and Dark Combined)33.8%±1.8%103.3 Baryon Acoustic Oscillations (BAO)Baryon Acoustic Oscillations (BAO) are another critical cosmological probe. They represent fossilized sound waves from the early universe that left a characteristic imprint on the large-scale distribution of matter, specifically in the clustering of galaxies. These imprinted scales act as a "standard ruler" in the universe, allowing astronomers to measure distances and infer the expansion history at different cosmic epochs.BAO measurements, when combined with CMB data and SNe Ia observations, provide exceptionally tight constraints on cosmological parameters. They are particularly effective in constraining the spatial curvature of the universe and the dark energy equation of state parameter, complementing the information derived from other probes.3 The convergence of results from these distinct observational methods strengthens the validity of the ΛCDM model, while also highlighting areas where subtle discrepancies might point towards new physics.4. Understanding the FileNotFoundError: Matplotlib Style Sheets4.1 General Nature of FileNotFoundError in PythonA FileNotFoundError is a common exception in Python that occurs when a program attempts to access a file or directory that does not exist at the specified path. This error indicates that the operating system could not locate the requested resource. In the context of Python libraries, this often means that a configuration file, an image asset, or, as in the user's case, a style sheet that the library expects to find is either missing, misnamed, or located in an unexpected directory.4.2 Matplotlib and Seaborn Style ManagementMatplotlib, a foundational plotting library in Python, offers extensive customization options for plot aesthetics. One powerful feature is the use of "style sheets," which are .mplstyle files. These files define various rcParams (runtime configuration parameters) that control elements like line widths, font sizes, colors, and background styles, allowing users to apply consistent visual themes to their plots.23Seaborn is a high-level data visualization library built atop Matplotlib. It simplifies the creation of aesthetically pleasing and informative statistical graphics. Seaborn provides its own set of pre-defined styles, many of which were historically exposed directly through Matplotlib's plt.style.use() function using aliases like seaborn-darkgrid.24 Users can inspect the styles available to their Matplotlib installation by calling plt.style.available, which returns a list of recognized style names.234.3 Common Reasons for This Error in Matplotlib/SeabornThe FileNotFoundError encountered with a Matplotlib style, specifically seaborn-darkgrid, typically stems from a few common issues:Deprecated Style Names (Primary Cause): The most frequent reason for this particular FileNotFoundError is that Matplotlib, especially from version 3.8 onwards, has deprecated the direct seaborn-<style> aliases. These styles are now generally prefixed with seaborn-v0_8- (e.g., seaborn-v0_8-darkgrid) to indicate the version of Seaborn they correspond to.23 If older code attempts to use plt.style.use('seaborn-darkgrid') with a newer Matplotlib version, the style file with that exact name will not be found, leading to the error.Missing Seaborn Installation: While less common if a specific Seaborn style name is being invoked, the Seaborn library itself might not be installed, or its installation could be corrupted. This would prevent Matplotlib from locating the associated style files, as they are typically bundled with Seaborn.27Environment Issues: Complex Python environments, particularly those with multiple Python installations or incorrectly configured pip or conda paths, can lead to situations where libraries are installed in one location, but the Python interpreter attempts to load them from another. This can result in FileNotFoundError if the style files are not found in the expected directory.28Typographical Errors: Simple mistakes in typing the style name, such as seaborn-darkgrid instead of seaborn-darkgrid, can also lead to the error, as the exact file name must be matched.This FileNotFoundError is a classic illustration of a pervasive challenge in scientific computing: managing library versions and their interdependencies. When code is developed against a specific version of a library, subsequent updates to that library (or its dependencies) can introduce breaking changes if backward compatibility is not perfectly maintained. The shift in Matplotlib's naming convention for Seaborn styles is a direct example of such a change. This highlights the critical importance of robust dependency management practices, such as using virtual environments and specifying exact package versions, in scientific code. Without these measures, code that functions perfectly today might fail unexpectedly tomorrow, compromising the reproducibility of research results and the long-term functionality of computational tools like a "Cosmic Unified Model" or "Observational Analyzer." Ensuring consistent software environments is not merely a matter of convenience; it is fundamental to the integrity and reliability of scientific computations.5. Practical Resolution: Diagnosing and Fixing the Style ErrorResolving a FileNotFoundError related to Matplotlib styles, particularly those from Seaborn, involves a systematic approach to diagnosis and correction.5.1 Diagnosing the ErrorThe initial steps to diagnose the FileNotFoundError involve verifying the available styles and the installation status of relevant libraries:Step 1: Check Available Styles: The most immediate action is to programmatically determine which styles Matplotlib currently recognizes. This can be done by executing the following Python code:Pythonimport matplotlib.pyplot as plt
print(plt.style.available)
The output of this command will display a list of all style sheet names accessible to your Matplotlib installation. This list will confirm if seaborn-darkgrid is indeed absent and, crucially, will reveal its updated name (e.g., seaborn-v0_8-darkgrid) if it has been renamed due to a library update.23Step 2: Verify Seaborn Installation: It is also important to ensure that Seaborn is correctly installed and that its version is compatible with your Matplotlib version. This can be checked from your terminal or command prompt:Bashpip show seaborn
pip show matplotlib
If Seaborn is not installed, or if the output indicates an issue, it should be installed using pip install seaborn.27 This step helps rule out a missing dependency as the root cause.5.2 Resolving the FileNotFoundErrorOnce the diagnosis is complete, several methods can be employed to resolve the style error:Method 1: Update the Style Name (Recommended)This is the most direct and generally preferred solution for issues arising from deprecated style names. Based on the output from plt.style.available, modify the line in your code that sets the style. For example, change plt.style.use('seaborn-darkgrid') to plt.style.use('seaborn-v0_8-darkgrid') or the exact name identified as available. This directly addresses the file not found issue by referencing the correct, updated style file.24Method 2: Use Seaborn's set_style() FunctionIf Seaborn is being used for plotting, it is often more robust to allow Seaborn to manage its own styles directly. Seaborn provides a dedicated function, sns.set_style(), which is designed to apply its aesthetic themes without needing the seaborn- prefix. This approach leverages Seaborn's internal style management, which is built to ensure compatibility with its own style definitions.Pythonimport seaborn as sns
sns.set_style("darkgrid") # No 'seaborn-' prefix needed here
import matplotlib.pyplot as plt
# Your plotting code
plt.show()
This method is generally more resilient to future naming conventions within Matplotlib's style system, as Seaborn handles the underlying mapping. 24Method 3: Downgrade Matplotlib (Temporary Workaround)In situations where updating the style name or using sns.set_style() is not immediately feasible (e.g., due to a complex legacy codebase with hardcoded style names that cannot be easily modified), temporarily downgrading Matplotlib to a version prior to 3.8 (such as 3.7.1) might resolve the issue.Bashpip install matplotlib==3.7.1
This is generally considered a less ideal solution because it may introduce other compatibility issues with newer Python features or other libraries, and it prevents access to the latest features and bug fixes in Matplotlib.24Method 4: Manually Copying Style Files (Advanced/Last Resort)As an advanced and last-resort measure, particularly if a specific third-party package has hardcoded paths or style names and cannot be updated, one might manually copy the seaborn-v0_8-darkgrid.mplstyle file to seaborn-darkgrid.mplstyle within Matplotlib's style library directory. This involves locating the Matplotlib installation's mpl-data/stylelib folder and duplicating the file with the old name. This is a "hacky" solution and should be approached with extreme caution, as it can lead to inconsistencies and may be overwritten by future library updates.24Table 3: Common Matplotlib/Seaborn Deprecated Styles and EquivalentsOld Matplotlib Style NameNew Matplotlib Style Name (v0_8 prefix)sns.set_style() Argumentseaborn-darkgridseaborn-v0_8-darkgriddarkgridseaborn-whitegridseaborn-v0_8-whitegridwhitegridseaborn-darkseaborn-v0_8-darkdarkseaborn-whiteseaborn-v0_8-whitewhite5.3 Guidance on Python Environments and Library VersionsTo prevent such FileNotFoundError issues and ensure the long-term stability and reproducibility of scientific code, particularly for complex projects like a "Cosmic Unified Model" and "Observational Analyzer," adherence to best practices for Python environments and library version management is crucial.Virtual Environments: It is strongly recommended to use virtual environments (e.g., venv or conda) for all Python projects. Virtual environments create isolated Python installations, ensuring that dependencies for one project do not conflict with those of another. This isolation is vital for maintaining consistent execution environments and ensuring that code runs identically regardless of other projects on the system.28Dependency Pinning: For any production or research code, it is advisable to "pin" the exact versions of all critical libraries. This involves specifying precise version numbers (e.g., matplotlib==3.8.0, seaborn==0.13.2) in a requirements.txt file. This practice guarantees that the code will always be run with the exact same dependencies, which is paramount for reproducibility. The pip freeze > requirements.txt command can be used to generate this file, and pip install -r requirements.txt can then install the pinned dependencies.28Regular Updates: While pinning dependencies is essential for reproducibility, it is also beneficial to periodically test the code with updated library versions in a controlled virtual environment. This proactive approach helps identify and address potential compatibility issues early, preventing unexpected failures when new library versions become prevalent.6. Recommendations for Robust Cosmological Code DevelopmentDeveloping robust computational tools for cosmology, such as a "Cosmic Unified Model" and an "Observational Analyzer," requires more than just scientific expertise; it demands meticulous attention to software engineering practices.6.1 Best Practices for Dependency ManagementVirtual Environments (Reiteration): The importance of virtual environments cannot be overstated. They provide isolated Python environments for each project, preventing conflicts between different projects and ensuring consistent execution. This isolation is fundamental for reproducibility, a cornerstone of scientific research.Requirements Files: Explicitly listing and pinning all project dependencies in a requirements.txt file is a critical practice. This file serves as a blueprint, allowing anyone to recreate the exact software environment required to run the code, thereby making the project easily reproducible by collaborators or on different machines.6.2 Strategies for Ensuring Code CompatibilityDefensive Programming: Writing code that anticipates potential issues is a valuable strategy. For instance, before attempting to use a specific Matplotlib style, the code could programmatically check the plt.style.available list. This allows for conditional logic or fallbacks, such as using a default style or logging a warning, if the desired style is not found.Automated Testing: Implementing unit and integration tests is crucial for catching breaking changes introduced by library updates. These tests can verify that core functionalities, including plotting with specific styles, continue to work as expected after dependency upgrades.Documentation: Comprehensive documentation of project dependencies and any known compatibility quirks is essential. A well-maintained README file or dedicated developer notes can save significant debugging time for future users and maintainers.6.3 General Tips for Debugging and Error HandlingRead Error Messages Carefully: The FileNotFoundError message itself often contains the most vital diagnostic information, including the exact path or file name that could not be located. Carefully examining these details is the first step in troubleshooting.Use try-except Blocks: For operations that are not critical to the core functionality of the program, such as setting a specific plot style, wrapping the code in try-except FileNotFoundError blocks can prevent the entire program from crashing. This allows the program to continue execution, perhaps with a default style, while logging a warning about the missing style.Consult Official Documentation and Community Forums: Official library documentation (e.g., Matplotlib, Seaborn) is an invaluable resource for understanding features, changes, and common issues. Community forums like Stack Overflow (as evidenced by the provided research material 24) are also excellent places to find solutions to common problems, as many users may have encountered similar issues.7. ConclusionComputational tools are indispensable in modern cosmology, serving as the bridge between theoretical models and observational data. The "Cosmic Unified Model" and "Observational Analyzer" represent this critical interplay, allowing researchers to simulate the universe's evolution and test these predictions against increasingly precise astronomical measurements. While the scientific rigor of these models is paramount, technical proficiency in managing software environments and debugging is equally vital for successful and reproducible research.The FileNotFoundError encountered by the user, specifically related to a Matplotlib style, is a common issue stemming from changes in library versioning, where style names were updated. This problem is readily resolvable by updating the style name to its current seaborn-v0_8- prefixed equivalent or by utilizing Seaborn's native sns.set_style() function, which offers a more robust approach to managing its aesthetic themes.The challenges presented by such technical issues underscore a broader point: the "Cosmic Unified Model," while highly successful in its ΛCDM form, is a living scientific construct. The existence of subtle yet statistically significant tensions with observational data, such as the Hubble constant discrepancy or the CMB lensing anomaly, highlights that our understanding of the universe is continuously being refined. These tensions motivate ongoing theoretical exploration of extensions to the standard model, even if current data do not yet definitively necessitate them. As observational precision continues to improve and theoretical frameworks evolve, the continuous interplay between these computational models and empirical data will remain at the forefront of cosmological discovery, pushing the boundaries of our knowledge about the cosmos.